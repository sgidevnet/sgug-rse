diff -u -r meson-git29ef44-orig/mesonbuild/backend/backends.py meson-git29ef44/mesonbuild/backend/backends.py
--- meson-git29ef44-orig/mesonbuild/backend/backends.py	2020-05-21 23:28:19.000000000 +0000
+++ meson-git29ef44/mesonbuild/backend/backends.py	2020-05-22 03:46:07.463499080 +0000
@@ -459,6 +459,7 @@
         for arg in args:
             if arg.startswith('-Wl,-rpath='):
                 for dir in arg.replace('-Wl,-rpath=','').split(':'):
+#                    print("Adding external rpath dir: " + repr(dir))
                     dirs.add(dir)
         return dirs
 
@@ -499,6 +500,7 @@
             result.add('meson-out')
         result.update(self.rpaths_for_bundled_shared_libraries(target))
         target.rpath_dirs_to_remove.update([d.encode('utf8') for d in result])
+#        print("determine_rpath_dirs returning " + repr(result))
         return tuple(result)
 
     def object_filename_from_source(self, target, source):
diff -u -r meson-git29ef44-orig/mesonbuild/compilers/compilers.py meson-git29ef44/mesonbuild/compilers/compilers.py
--- meson-git29ef44-orig/mesonbuild/compilers/compilers.py	2020-05-21 23:28:19.000000000 +0000
+++ meson-git29ef44/mesonbuild/compilers/compilers.py	2020-05-22 03:46:07.466613160 +0000
@@ -257,8 +257,8 @@
                 'b_sanitize': coredata.UserComboOption('Code sanitizer to use',
                                                        ['none', 'address', 'thread', 'undefined', 'memory', 'address,undefined'],
                                                        'none'),
-                'b_lundef': coredata.UserBooleanOption('Use -Wl,--no-undefined when linking', True),
-                'b_asneeded': coredata.UserBooleanOption('Use -Wl,--as-needed when linking', True),
+                'b_lundef': coredata.UserBooleanOption('Use -Wl,--no-undefined when linking', False),
+                'b_asneeded': coredata.UserBooleanOption('Use -Wl,--as-needed when linking', False),
                 'b_pgo': coredata.UserComboOption('Use profile guided optimization',
                                                   ['off', 'generate', 'use'],
                                                   'off'),
diff -u -r meson-git29ef44-orig/mesonbuild/environment.py meson-git29ef44/mesonbuild/environment.py
--- meson-git29ef44-orig/mesonbuild/environment.py	2020-05-21 23:28:19.000000000 +0000
+++ meson-git29ef44/mesonbuild/environment.py	2020-05-22 03:46:07.470653480 +0000
@@ -326,6 +326,8 @@
         trial = detect_windows_arch(compilers)
     elif mesonlib.is_freebsd() or mesonlib.is_netbsd() or mesonlib.is_openbsd():
         trial = platform.processor().lower()
+    elif mesonlib.is_irix():
+        trial = 'mips'
     else:
         trial = platform.machine().lower()
     if trial.startswith('i') and trial.endswith('86'):
@@ -373,6 +375,8 @@
         trial = detect_windows_arch(compilers)
     elif mesonlib.is_freebsd() or mesonlib.is_netbsd() or mesonlib.is_openbsd():
         trial = platform.processor().lower()
+    elif mesonlib.is_irix():
+        trial = 'mips'
     else:
         trial = platform.machine().lower()
 
diff -u -r meson-git29ef44-orig/mesonbuild/linkers.py meson-git29ef44/mesonbuild/linkers.py
--- meson-git29ef44-orig/mesonbuild/linkers.py	2020-05-21 23:28:19.000000000 +0000
+++ meson-git29ef44/mesonbuild/linkers.py	2020-05-22 03:48:33.085440280 +0000
@@ -558,7 +558,11 @@
         if not rpath_paths and not install_rpath and not build_rpath:
             return ([], set())
         args = []
-        origin_placeholder = '$ORIGIN'
+        if mesonlib.is_irix():
+            origin_placeholder = '/empty/origin/path/'
+        else:
+            origin_placeholder = '$ORIGIN'
+
         processed_rpaths = prepare_rpaths(rpath_paths, build_dir, from_dir)
         # Need to deduplicate rpaths, as macOS's install_name_tool
         # is *very* allergic to duplicate -delete_rpath arguments
@@ -566,13 +570,24 @@
         all_paths = mesonlib.OrderedSet([os.path.join(origin_placeholder, p) for p in processed_rpaths])
         rpath_dirs_to_remove = set()
         for p in all_paths:
+            if p == '/usr/sgug/lib32':
+                continue
             rpath_dirs_to_remove.add(p.encode('utf8'))
         # Build_rpath is used as-is (it is usually absolute).
         if build_rpath != '':
             all_paths.add(build_rpath)
             for p in build_rpath.split(':'):
+                if p == '/usr/sgug/lib32':
+                    continue
                 rpath_dirs_to_remove.add(p.encode('utf8'))
 
+        # A hack to stop meson removing our lib32 rpath directory during
+        # install. Meson thinks that because it's the target install dir
+        # and its included in the rpath during building it must be a
+        # "build_rpath" - which isn't helpful
+#        if mesonlib.is_irix():
+#            rpath_dirs_to_remove.remove('/usr/sgug/lib32'.encode('utf8'))
+
         # TODO: should this actually be "for (dragonfly|open)bsd"?
         if mesonlib.is_dragonflybsd() or mesonlib.is_openbsd():
             # This argument instructs the compiler to record the value of
diff -u -r meson-git29ef44-orig/mesonbuild/mesonlib.py meson-git29ef44/mesonbuild/mesonlib.py
--- meson-git29ef44-orig/mesonbuild/mesonlib.py	2020-05-21 23:28:19.000000000 +0000
+++ meson-git29ef44/mesonbuild/mesonlib.py	2020-05-22 03:46:07.476800440 +0000
@@ -511,6 +511,8 @@
 def is_hurd() -> bool:
     return platform.system().lower() == 'gnu'
 
+def is_irix() -> bool:
+    return platform.system().lower().startswith('irix')
 
 def exe_exists(arglist: T.List[str]) -> bool:
     try:
@@ -744,6 +746,8 @@
 
 
 def get_library_dirs() -> T.List[str]:
+    if is_irix():
+        return ['/usr/lib32','/lib32']
     if is_windows():
         return ['C:/mingw/lib'] # TODO: get programmatically
     if is_osx():
diff -u -r meson-git29ef44-orig/mesonbuild/scripts/depfixer.py meson-git29ef44/mesonbuild/scripts/depfixer.py
--- meson-git29ef44-orig/mesonbuild/scripts/depfixer.py	2020-05-21 23:28:19.000000000 +0000
+++ meson-git29ef44/mesonbuild/scripts/depfixer.py	2020-05-22 03:46:07.479043240 +0000
@@ -297,6 +297,7 @@
         self.fix_rpathtype_entry(rpath_dirs_to_remove, new_rpath, DT_RUNPATH)
 
     def fix_rpathtype_entry(self, rpath_dirs_to_remove, new_rpath, entrynum):
+#        print("fix_rpathtype_entry rdtr=" + repr(rpath_dirs_to_remove) + " nrp=" + repr(new_rpath))
         if isinstance(new_rpath, str):
             new_rpath = new_rpath.encode('utf8')
         rp_off = self.get_entry_offset(entrynum)
@@ -321,6 +322,7 @@
 
         # Prepend user-specified new entries while preserving the ones that came from pkgconfig etc.
         new_rpath = b':'.join(new_rpaths)
+#        print("Resetting from " + old_rpath.decode("utf-8") + " to " + new_rpath.decode("utf-8"))
 
         if len(old_rpath) < len(new_rpath):
             sys.exit("New rpath must not be longer than the old one.")
@@ -365,6 +367,7 @@
             e.print_rpath()
             e.print_runpath()
         else:
+#            print("fix_elf of " + fname)
             e.fix_rpath(rpath_dirs_to_remove, new_rpath)
 
 def get_darwin_rpaths_to_remove(fname):
