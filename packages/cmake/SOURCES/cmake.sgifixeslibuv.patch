diff -u -r -N cmake-3.17.2-orig/Modules/Platform/IRIX-GNU.cmake cmake-3.17.2/Modules/Platform/IRIX-GNU.cmake
--- cmake-3.17.2-orig/Modules/Platform/IRIX-GNU.cmake	1970-01-01 00:00:00.000000000 +0000
+++ cmake-3.17.2/Modules/Platform/IRIX-GNU.cmake	2020-05-12 18:15:19.077875480 +0000
@@ -0,0 +1,8 @@
+# This module is shared by multiple languages; use include blocker.
+if(__IRIX_COMPILER_GNU)
+  return()
+endif()
+set(__IRIX_COMPILER_GNU 1)
+
+macro(__irix_compiler_gnu lang)
+endmacro()
diff -u -r -N cmake-3.17.2-orig/Modules/Platform/IRIX.cmake cmake-3.17.2/Modules/Platform/IRIX.cmake
--- cmake-3.17.2-orig/Modules/Platform/IRIX.cmake	1970-01-01 00:00:00.000000000 +0000
+++ cmake-3.17.2/Modules/Platform/IRIX.cmake	2020-05-12 18:15:19.079508280 +0000
@@ -0,0 +1,29 @@
+set(CMAKE_DL_LIBS "dl")
+set(CMAKE_INSTALL_LIBDIR "lib32")
+set(CMAKE_SHARED_LIBRARY_RUNTIME_C_FLAG "-Wl,-rpath,")
+set(CMAKE_SHARED_LIBRARY_RUNTIME_C_FLAG_SEP ":")
+#set(CMAKE_SHARED_LIBRARY_RPATH_ORIGIN_TOKEN "\$ORIGIN")
+set(CMAKE_SHARED_LIBRARY_RPATH_LINK_C_FLAG "-Wl,-rpath-link,")
+set(CMAKE_SHARED_LIBRARY_SONAME_C_FLAG "-Wl,-soname,")
+set(CMAKE_EXE_EXPORTS_C_FLAG "-Wl,--export-dynamic")
+
+# Shared libraries with no builtin soname may not be linked safely by
+# specifying the file path.
+set(CMAKE_PLATFORM_USES_PATH_WHEN_NO_SONAME 1)
+
+# Initialize C link type selection flags.  These flags are used when
+# building a shared library, shared module, or executable that links
+# to other libraries to select whether to use the static or shared
+# versions of the libraries.
+foreach(type SHARED_LIBRARY SHARED_MODULE EXE)
+  set(CMAKE_${type}_LINK_STATIC_C_FLAGS "-Wl,-Bstatic")
+  set(CMAKE_${type}_LINK_DYNAMIC_C_FLAGS "-Wl,-Bdynamic")
+endforeach()
+
+set(CMAKE_INSTALL_SO_NO_EXE 1 CACHE INTERNAL
+    "Install .so files with execute permission.")
+
+include(Platform/UnixPaths)
+
+# Sgug uses lib32 target directories
+set_property(GLOBAL PROPERTY FIND_LIBRARY_USE_LIB32_PATHS TRUE)
diff -u -r -N cmake-3.17.2-orig/Modules/Platform/IRIX64-GNU.cmake cmake-3.17.2/Modules/Platform/IRIX64-GNU.cmake
--- cmake-3.17.2-orig/Modules/Platform/IRIX64-GNU.cmake	1970-01-01 00:00:00.000000000 +0000
+++ cmake-3.17.2/Modules/Platform/IRIX64-GNU.cmake	2020-05-12 18:15:19.080986120 +0000
@@ -0,0 +1,8 @@
+# This module is shared by multiple languages; use include blocker.
+if(__IRIX_COMPILER_GNU)
+  return()
+endif()
+set(__IRIX_COMPILER_GNU 1)
+
+macro(__irix_compiler_gnu lang)
+endmacro()
diff -u -r -N cmake-3.17.2-orig/Modules/Platform/IRIX64.cmake cmake-3.17.2/Modules/Platform/IRIX64.cmake
--- cmake-3.17.2-orig/Modules/Platform/IRIX64.cmake	1970-01-01 00:00:00.000000000 +0000
+++ cmake-3.17.2/Modules/Platform/IRIX64.cmake	2020-05-12 18:15:19.082310760 +0000
@@ -0,0 +1,29 @@
+set(CMAKE_DL_LIBS "dl")
+set(CMAKE_INSTALL_LIBDIR "lib32")
+set(CMAKE_SHARED_LIBRARY_RUNTIME_C_FLAG "-Wl,-rpath,")
+set(CMAKE_SHARED_LIBRARY_RUNTIME_C_FLAG_SEP ":")
+#set(CMAKE_SHARED_LIBRARY_RPATH_ORIGIN_TOKEN "\$ORIGIN")
+set(CMAKE_SHARED_LIBRARY_RPATH_LINK_C_FLAG "-Wl,-rpath-link,")
+set(CMAKE_SHARED_LIBRARY_SONAME_C_FLAG "-Wl,-soname,")
+set(CMAKE_EXE_EXPORTS_C_FLAG "-Wl,--export-dynamic")
+
+# Shared libraries with no builtin soname may not be linked safely by
+# specifying the file path.
+set(CMAKE_PLATFORM_USES_PATH_WHEN_NO_SONAME 1)
+
+# Initialize C link type selection flags.  These flags are used when
+# building a shared library, shared module, or executable that links
+# to other libraries to select whether to use the static or shared
+# versions of the libraries.
+foreach(type SHARED_LIBRARY SHARED_MODULE EXE)
+  set(CMAKE_${type}_LINK_STATIC_C_FLAGS "-Wl,-Bstatic")
+  set(CMAKE_${type}_LINK_DYNAMIC_C_FLAGS "-Wl,-Bdynamic")
+endforeach()
+
+set(CMAKE_INSTALL_SO_NO_EXE 1 CACHE INTERNAL
+    "Install .so files with execute permission.")
+
+include(Platform/UnixPaths)
+
+# Sgug uses lib32 target directories
+set_property(GLOBAL PROPERTY FIND_LIBRARY_USE_LIB32_PATHS TRUE)
diff -u -r -N cmake-3.17.2-orig/Source/CTest/cmProcess.cxx cmake-3.17.2/Source/CTest/cmProcess.cxx
--- cmake-3.17.2-orig/Source/CTest/cmProcess.cxx	2020-04-28 15:23:06.000000000 +0000
+++ cmake-3.17.2/Source/CTest/cmProcess.cxx	2020-05-12 18:15:19.084400920 +0000
@@ -106,7 +106,7 @@
   options.stdio_count = 3; // in, out and err
   options.exit_cb = &cmProcess::OnExitCB;
   options.stdio = stdio;
-#if !defined(CMAKE_USE_SYSTEM_LIBUV)
+#if !defined(CMAKE_USE_SYSTEM_LIBUV) && !defined(__sgi)
   std::vector<char> cpumask;
   if (affinity && !affinity->empty()) {
     cpumask.resize(static_cast<size_t>(uv_cpumask_size()), 0);
diff -u -r -N cmake-3.17.2-orig/Source/cmSystemTools.cxx cmake-3.17.2/Source/cmSystemTools.cxx
--- cmake-3.17.2-orig/Source/cmSystemTools.cxx	2020-04-28 15:23:06.000000000 +0000
+++ cmake-3.17.2/Source/cmSystemTools.cxx	2020-05-12 18:15:21.059611400 +0000
@@ -1885,7 +1885,9 @@
 
   // Try using a real random source.
   cmsys::ifstream fin;
+#if !defined(__sgi)
   fin.rdbuf()->pubsetbuf(nullptr, 0); // Unbuffered read.
+#endif
   fin.open("/dev/urandom");
   if (fin.good() && fin.read(seed.bytes, sizeof(seed)) &&
       fin.gcount() == sizeof(seed)) {
diff -u -r -N cmake-3.17.2-orig/Utilities/cmlibarchive/libarchive/archive_read_disk_posix.c cmake-3.17.2/Utilities/cmlibarchive/libarchive/archive_read_disk_posix.c
--- cmake-3.17.2-orig/Utilities/cmlibarchive/libarchive/archive_read_disk_posix.c	2020-04-28 15:23:06.000000000 +0000
+++ cmake-3.17.2/Utilities/cmlibarchive/libarchive/archive_read_disk_posix.c	2020-05-12 18:15:21.064553800 +0000
@@ -2465,7 +2465,7 @@
 tree_current_lstat(struct tree *t)
 {
 	if (!(t->flags & hasLstat)) {
-#ifdef HAVE_FSTATAT
+#if defined(HAVE_FSTATAT) && !defined(__sgi)
 		if (fstatat(tree_current_dir_fd(t),
 		    tree_current_access_path(t), &t->lst,
 		    AT_SYMLINK_NOFOLLOW) != 0)
diff -u -r -N cmake-3.17.2-orig/Utilities/cmlibarchive/libarchive/filter_fork_posix.c cmake-3.17.2/Utilities/cmlibarchive/libarchive/filter_fork_posix.c
--- cmake-3.17.2-orig/Utilities/cmlibarchive/libarchive/filter_fork_posix.c	2020-04-28 15:23:06.000000000 +0000
+++ cmake-3.17.2/Utilities/cmlibarchive/libarchive/filter_fork_posix.c	2020-05-12 18:15:21.066373640 +0000
@@ -77,7 +77,7 @@
 {
 	pid_t child;
 	int stdin_pipe[2], stdout_pipe[2], tmp;
-#if HAVE_POSIX_SPAWNP
+#if defined(HAVE_POSIX_SPAWNP) && !defined(__sgi)
 	posix_spawn_file_actions_t actions;
 	int r;
 #endif
@@ -106,7 +106,7 @@
 		stdout_pipe[1] = tmp;
 	}
 
-#if HAVE_POSIX_SPAWNP
+#if defined(HAVE_POSIX_SPAWNP) && !defined(__sgi)
 
 	r = posix_spawn_file_actions_init(&actions);
 	if (r != 0) {
@@ -179,7 +179,7 @@
 
 	return child;
 
-#if HAVE_POSIX_SPAWNP
+#if defined(HAVE_POSIX_SPAWNP) && !defined(__sgi)
 actions_inited:
 	errno = r;
 	posix_spawn_file_actions_destroy(&actions);
diff -u -r -N cmake-3.17.2-orig/Utilities/cmlibuv/CMakeLists.txt cmake-3.17.2/Utilities/cmlibuv/CMakeLists.txt
--- cmake-3.17.2-orig/Utilities/cmlibuv/CMakeLists.txt	2020-04-28 15:23:06.000000000 +0000
+++ cmake-3.17.2/Utilities/cmlibuv/CMakeLists.txt	2020-05-12 18:15:21.067964280 +0000
@@ -336,6 +336,23 @@
     )
 endif()
 
+if(CMAKE_SYSTEM_NAME MATCHES "IRIX")
+  list(APPEND uv_libraries dl rt)
+  list(APPEND uv_headers
+    include/uv/posix.h
+    )
+  list(APPEND uv_defines
+    _SGI_SOURCE
+    _SGI_REENTRANT_FUNCTIONS
+    )
+  list(APPEND uv_sources
+    src/unix/irix.c
+    src/unix/no-fsevents.c
+    src/unix/posix-poll.c
+    src/unix/posix-hrtime.c
+    )
+endif()
+
 include_directories(
   ${uv_includes}
   ${KWSYS_HEADER_ROOT}
diff -u -r -N cmake-3.17.2-orig/Utilities/cmlibuv/include/uv/unix.h cmake-3.17.2/Utilities/cmlibuv/include/uv/unix.h
--- cmake-3.17.2-orig/Utilities/cmlibuv/include/uv/unix.h	2020-04-28 15:23:06.000000000 +0000
+++ cmake-3.17.2/Utilities/cmlibuv/include/uv/unix.h	2020-05-12 18:15:21.069904920 +0000
@@ -70,6 +70,8 @@
       defined(__MSYS__)   || \
       defined(__GNU__)
 # include "posix.h"
+#elif defined(__sgi)
+# include "posix.h"
 #elif defined(__HAIKU__)
 # include "posix.h"
 #endif
diff -u -r -N cmake-3.17.2-orig/Utilities/cmlibuv/include/uv.h cmake-3.17.2/Utilities/cmlibuv/include/uv.h
--- cmake-3.17.2-orig/Utilities/cmlibuv/include/uv.h	2020-04-28 15:23:06.000000000 +0000
+++ cmake-3.17.2/Utilities/cmlibuv/include/uv.h	2020-05-12 18:15:21.073418360 +0000
@@ -24,6 +24,31 @@
 #ifndef UV_H
 #define UV_H
 
+#if defined(__sgi)
+
+# define SCM_RIGHTS 0x01
+
+# include <unistd.h>
+# include <sys/types.h>
+# include <sys/socket.h>
+# include <bstring.h>
+# include <sys/time.h>
+/* Ugly redefines to use xpg5 style recvmsg/sendmsg and msg_flags */
+/* (Since we can't just define _XOPEN_SOURCE 500 without breaking other stuff */
+/*
+# undef CMSG_FIRSTHDR
+# define CMSG_FIRSTHDR(mhdr) ((struct cmsghdr *)(mhdr)->msg_ctrl)
+# undef CMSG_NXTHDR
+# define CMSG_NXTHDR(mhdr, cmsg)					\
+  (((caddr_t)(cmsg) + (cmsg)->cmsg_len + sizeof(struct cmsghdr) >	\
+    (caddr_t)(mhdr)->msg_ctrl + (mhdr)->msg_ctrllen) ?			\
+   (struct cmsghdr *)0L :						\
+   (struct cmsghdr *)((caddr_t)(cmsg) + _ALIGN((cmsg)->cmsg_len)))
+extern ssize_t _xpg5_recvmsg(int, struct xpg5_msghdr *, int);
+extern ssize_t _xpg5_sendmsg(int, const struct xpg5_msghdr *, int);
+*/
+#endif
+
 /* Include KWSys Large File Support configuration. */
 #include <cmsys/Configure.h>
 
diff -u -r -N cmake-3.17.2-orig/Utilities/cmlibuv/src/unix/core.c cmake-3.17.2/Utilities/cmlibuv/src/unix/core.c
--- cmake-3.17.2-orig/Utilities/cmlibuv/src/unix/core.c	2020-04-28 15:23:06.000000000 +0000
+++ cmake-3.17.2/Utilities/cmlibuv/src/unix/core.c	2020-05-12 18:15:21.076952200 +0000
@@ -587,7 +587,7 @@
 }
 
 
-#if !defined(__hpux) && !defined(__CYGWIN__) && !defined(__MSYS__) && !defined(__HAIKU__)
+#if !defined(__hpux) && !defined(__CYGWIN__) && !defined(__MSYS__) && !defined(__HAIKU__) && !defined(__sgi)
 int uv__cloexec_ioctl(int fd, int set) {
   int r;
 
@@ -665,7 +665,11 @@
 }
 
 
+#if defined(__sgii)
+ssize_t uv__recvmsg(int fd, struct xpg5_msghdr* msg, int flags) {
+#else
 ssize_t uv__recvmsg(int fd, struct msghdr* msg, int flags) {
+#endif
   struct cmsghdr* cmsg;
   ssize_t rc;
   int* pfd;
@@ -685,12 +689,18 @@
   } else {
     rc = recvmsg(fd, msg, flags);
   }
+#elif defined(__sgii)
+  rc = _xpg5_recvmsg(fd, msg, flags);
 #else
   rc = recvmsg(fd, msg, flags);
 #endif
   if (rc == -1)
     return UV__ERR(errno);
+#if defined(__sgi)
+/*  if (msg->msg_ctrllen == 0)*/
+#else
   if (msg->msg_controllen == 0)
+#endif
     return rc;
   for (cmsg = CMSG_FIRSTHDR(msg); cmsg != NULL; cmsg = CMSG_NXTHDR(msg, cmsg))
     if (cmsg->cmsg_type == SCM_RIGHTS)
diff -u -r -N cmake-3.17.2-orig/Utilities/cmlibuv/src/unix/fs.c cmake-3.17.2/Utilities/cmlibuv/src/unix/fs.c
--- cmake-3.17.2-orig/Utilities/cmlibuv/src/unix/fs.c	2020-04-28 15:23:06.000000000 +0000
+++ cmake-3.17.2/Utilities/cmlibuv/src/unix/fs.c	2020-05-12 18:17:20.981414120 +0000
@@ -358,7 +358,7 @@
 }
 
 
-#if defined(__APPLE__) && !defined(MAC_OS_X_VERSION_10_8)
+#if (defined(__APPLE__) || defined(__sgi)) && !defined(MAC_OS_X_VERSION_10_8)
 #define UV_CONST_DIRENT uv__dirent_t
 #else
 #define UV_CONST_DIRENT const uv__dirent_t
@@ -575,8 +575,12 @@
 #else
   ssize_t len;
 
+#if defined(__sgi)
+  buf = uv__malloc(PATH_MAX + 1);
+#else
   len = uv__fs_pathmax_size(req->path);
   buf = uv__malloc(len + 1);
+#endif
 
   if (buf == NULL) {
     errno = ENOMEM;
diff -u -r -N cmake-3.17.2-orig/Utilities/cmlibuv/src/unix/internal.h cmake-3.17.2/Utilities/cmlibuv/src/unix/internal.h
--- cmake-3.17.2-orig/Utilities/cmlibuv/src/unix/internal.h	2020-04-28 15:23:06.000000000 +0000
+++ cmake-3.17.2/Utilities/cmlibuv/src/unix/internal.h	2020-05-12 18:15:21.081513640 +0000
@@ -195,7 +195,11 @@
 int uv__close_nocheckstdio(int fd);
 int uv__close_nocancel(int fd);
 int uv__socket(int domain, int type, int protocol);
+#if defined(__sgii)
+ssize_t uv__recvmsg(int fd, struct xpg5_msghdr *msg, int flags);
+#else
 ssize_t uv__recvmsg(int fd, struct msghdr *msg, int flags);
+#endif
 void uv__make_close_pending(uv_handle_t* handle);
 int uv__getiovmax(void);
 
@@ -318,9 +322,16 @@
 
 typedef int (*uv__peersockfunc)(int, struct sockaddr*, socklen_t*);
 
+#if defined(__sgi)
+int uv__getsockpeername(const uv_handle_t* handle,
+                        uv__peersockfunc func,
+                        struct sockaddr* name,
+                        socklen_t* namelen);
+#else
 int uv__getsockpeername(const uv_handle_t* handle,
                         uv__peersockfunc func,
                         struct sockaddr* name,
                         int* namelen);
+#endif
 
 #endif /* UV_UNIX_INTERNAL_H_ */
diff -u -r -N cmake-3.17.2-orig/Utilities/cmlibuv/src/unix/irix.c cmake-3.17.2/Utilities/cmlibuv/src/unix/irix.c
--- cmake-3.17.2-orig/Utilities/cmlibuv/src/unix/irix.c	1970-01-01 00:00:00.000000000 +0000
+++ cmake-3.17.2/Utilities/cmlibuv/src/unix/irix.c	2020-05-12 18:15:21.082977320 +0000
@@ -0,0 +1,45 @@
+#include "uv.h"
+#include "internal.h"
+
+extern char** environ;
+
+int setenv(const char *name, const char *value, int o) {
+  size_t len = strlen(name) + strlen(value) + 2;
+  char *s = malloc(len+1);
+  int ret;
+
+  snprintf(s, len, "%s=%s", name, value);
+  ret = putenv(s);
+  free(s);
+  return ret;
+}
+
+int unsetenv (const char *name) {
+  size_t len;
+  char **ep;
+
+  if (name == NULL || *name == '\0' || strchr (name, '=') != NULL)
+    return UV_EINVAL;
+
+  len = strlen (name);
+
+  ep = environ;
+  while (*ep != NULL)
+    if (!strncmp (*ep, name, len) && (*ep)[len] == '=') {
+      char **dp = ep;
+
+      do
+	dp[0] = dp[1];
+      while (*dp++);
+    } else { 
+      ++ep;
+    }
+
+  return 0;
+}
+
+
+char *mkdtemp(char *template) {
+  mkdir(mktemp(template), 0700);
+  return template;
+}
diff -u -r -N cmake-3.17.2-orig/Utilities/cmlibuv/src/unix/posix-hrtime.c cmake-3.17.2/Utilities/cmlibuv/src/unix/posix-hrtime.c
--- cmake-3.17.2-orig/Utilities/cmlibuv/src/unix/posix-hrtime.c	2020-04-28 15:23:06.000000000 +0000
+++ cmake-3.17.2/Utilities/cmlibuv/src/unix/posix-hrtime.c	2020-05-12 18:15:21.084081880 +0000
@@ -67,7 +67,11 @@
 
 uint64_t uv__hrtime(uv_clocktype_t type) {
   struct timespec ts;
+#if defined(__sgi)
+  clock_gettime(CLOCK_SGI_CYCLE, &ts);
+#else
   clock_gettime(CLOCK_MONOTONIC, &ts);
+#endif
   return (((uint64_t) ts.tv_sec) * NANOSEC + ts.tv_nsec);
 }
 
diff -u -r -N cmake-3.17.2-orig/Utilities/cmlibuv/src/unix/stream.c cmake-3.17.2/Utilities/cmlibuv/src/unix/stream.c
--- cmake-3.17.2-orig/Utilities/cmlibuv/src/unix/stream.c	2020-04-28 15:23:06.000000000 +0000
+++ cmake-3.17.2/Utilities/cmlibuv/src/unix/stream.c	2020-05-12 18:15:21.087179240 +0000
@@ -840,7 +840,11 @@
 
   if (req->send_handle) {
     int fd_to_send;
+#if defined(__sgii)
+    struct xpg5_msghdr msg;
+#else
     struct msghdr msg;
+#endif
     struct cmsghdr *cmsg;
     union {
       char data[64];
@@ -862,10 +866,17 @@
     msg.msg_namelen = 0;
     msg.msg_iov = iov;
     msg.msg_iovlen = iovcnt;
+#if !defined(__sgi)
     msg.msg_flags = 0;
+#endif
 
+#if defined(__sgi)
+/*    msg.msg_ctrl = &scratch.alias;
+    msg.msg_ctrllen = CMSG_SPACE(sizeof(fd_to_send));*/
+#else
     msg.msg_control = &scratch.alias;
     msg.msg_controllen = CMSG_SPACE(sizeof(fd_to_send));
+#endif
 
     cmsg = CMSG_FIRSTHDR(&msg);
     cmsg->cmsg_level = SOL_SOCKET;
@@ -880,7 +891,11 @@
     }
 
     do
+#if defined(__sgii)
+      n = _xpg5_sendmsg(uv__stream_fd(stream), &msg, 0);
+#else
       n = sendmsg(uv__stream_fd(stream), &msg, 0);
+#endif
     while (n == -1 && RETRY_ON_WRITE_ERROR(errno));
 
     /* Ensure the handle isn't sent again in case this is a partial write. */
@@ -1052,7 +1067,11 @@
 #define UV__CMSG_FD_SIZE (UV__CMSG_FD_COUNT * sizeof(int))
 
 
+#if defined(__sgii)
+static int uv__stream_recv_cmsg(uv_stream_t* stream, struct xpg5_msghdr* msg) {
+#else
 static int uv__stream_recv_cmsg(uv_stream_t* stream, struct msghdr* msg) {
+#endif
   struct cmsghdr* cmsg;
 
   for (cmsg = CMSG_FIRSTHDR(msg); cmsg != NULL; cmsg = CMSG_NXTHDR(msg, cmsg)) {
@@ -1111,7 +1130,11 @@
 static void uv__read(uv_stream_t* stream) {
   uv_buf_t buf;
   ssize_t nread;
+#if defined(__sgii)
+  struct xpg5_msghdr msg;
+#else
   struct msghdr msg;
+#endif
   char cmsg_space[CMSG_SPACE(UV__CMSG_FD_SIZE)];
   int count;
   int err;
@@ -1152,14 +1175,21 @@
       while (nread < 0 && errno == EINTR);
     } else {
       /* ipc uses recvmsg */
+#if !defined(__sgi)
       msg.msg_flags = 0;
+#endif
       msg.msg_iov = (struct iovec*) &buf;
       msg.msg_iovlen = 1;
       msg.msg_name = NULL;
       msg.msg_namelen = 0;
       /* Set up to receive a descriptor even if one isn't in the message */
+#if defined(__sgi)
+/*      msg.msg_ctrllen = sizeof(cmsg_space);
+      msg.msg_ctrl = cmsg_space;*/
+#else
       msg.msg_controllen = sizeof(cmsg_space);
       msg.msg_control = cmsg_space;
+#endif
 
       do {
         nread = uv__recvmsg(uv__stream_fd(stream), &msg, 0);
diff -u -r -N cmake-3.17.2-orig/Utilities/cmlibuv/src/unix/thread.c cmake-3.17.2/Utilities/cmlibuv/src/unix/thread.c
--- cmake-3.17.2-orig/Utilities/cmlibuv/src/unix/thread.c	2020-04-28 15:23:06.000000000 +0000
+++ cmake-3.17.2/Utilities/cmlibuv/src/unix/thread.c	2020-05-12 18:17:49.497670640 +0000
@@ -700,7 +700,7 @@
   if (err)
     return UV__ERR(err);
 
-#if !(defined(__ANDROID_API__) && __ANDROID_API__ < 21) && !defined(__hpux)
+#if !(defined(__ANDROID_API__) && __ANDROID_API__ < 21) && !defined(__hpux) && !defined(__sgi)
   err = pthread_condattr_setclock(&attr, CLOCK_MONOTONIC);
   if (err)
     goto error2;
@@ -778,7 +778,7 @@
 int uv_cond_timedwait(uv_cond_t* cond, uv_mutex_t* mutex, uint64_t timeout) {
   int r;
   struct timespec ts;
-#if defined(__MVS__)
+#if defined(__MVS__) || defined(__sgi)
   struct timeval tv;
 #endif
 
@@ -787,7 +787,7 @@
   ts.tv_nsec = timeout % NANOSEC;
   r = pthread_cond_timedwait_relative_np(cond, mutex, &ts);
 #else
-#if defined(__MVS__)
+#if defined(__MVS__) || defined(__sgi)
   if (gettimeofday(&tv, NULL))
     abort();
   timeout += tv.tv_sec * NANOSEC + tv.tv_usec * 1e3;
diff -u -r -N cmake-3.17.2-orig/Utilities/cmlibuv/src/unix/tty.c cmake-3.17.2/Utilities/cmlibuv/src/unix/tty.c
--- cmake-3.17.2-orig/Utilities/cmlibuv/src/unix/tty.c	2020-04-28 15:23:06.000000000 +0000
+++ cmake-3.17.2/Utilities/cmlibuv/src/unix/tty.c	2020-05-12 18:18:09.978706160 +0000
@@ -200,7 +200,7 @@
 static void uv__tty_make_raw(struct termios* tio) {
   assert(tio != NULL);
 
-#if defined __sun || defined __MVS__ || defined __hpux
+#if defined __sun || defined __MVS__ || defined __hpux || defined(__sgi)
   /*
    * This implementation of cfmakeraw for Solaris and derivatives is taken from
    * http://www.perkin.org.uk/posts/solaris-portability-cfmakeraw.html.
@@ -321,7 +321,7 @@
       return UV_UDP;
 
   if (type == SOCK_STREAM) {
-#if defined(_AIX) || defined(__DragonFly__)
+#if defined(_AIX) || defined(__DragonFly__) || defined(__sgi)
     /* on AIX/DragonFly the getsockname call returns an empty sa structure
      * for sockets of type AF_UNIX.  For all other types it will
      * return a properly filled in structure.
diff -u -r -N cmake-3.17.2-orig/Utilities/cmlibuv/src/unix/udp.c cmake-3.17.2/Utilities/cmlibuv/src/unix/udp.c
--- cmake-3.17.2-orig/Utilities/cmlibuv/src/unix/udp.c	2020-04-28 15:23:06.000000000 +0000
+++ cmake-3.17.2/Utilities/cmlibuv/src/unix/udp.c	2020-05-12 18:15:21.093468520 +0000
@@ -151,7 +151,11 @@
 
 static void uv__udp_recvmsg(uv_udp_t* handle) {
   struct sockaddr_storage peer;
+#if defined(__sgii)
+  struct xpg5_msghdr h;
+#else
   struct msghdr h;
+#endif
   ssize_t nread;
   uv_buf_t buf;
   int flags;
@@ -182,7 +186,11 @@
     h.msg_iovlen = 1;
 
     do {
+#if defined(__sgii)
+      nread = _xpg5_recvmsg(handle->io_watcher.fd, &h, 0);
+#else
       nread = recvmsg(handle->io_watcher.fd, &h, 0);
+#endif
     }
     while (nread == -1 && errno == EINTR);
 
@@ -200,8 +208,10 @@
         addr = (const struct sockaddr*) &peer;
 
       flags = 0;
+#if !defined(__sgi)
       if (h.msg_flags & MSG_TRUNC)
         flags |= UV_UDP_PARTIAL;
+#endif
 
       handle->recv_cb(handle, nread, &buf, addr, flags);
     }
@@ -217,7 +227,11 @@
 static void uv__udp_sendmsg(uv_udp_t* handle) {
   uv_udp_send_t* req;
   QUEUE* q;
+#if defined(__sgii)
+  struct xpg5_msghdr h;
+#else
   struct msghdr h;
+#endif
   ssize_t size;
 
   while (!QUEUE_EMPTY(&handle->write_queue)) {
@@ -248,7 +262,11 @@
     h.msg_iovlen = req->nbufs;
 
     do {
+#if defined(__sgii)
+      size = _xpg5_sendmsg(handle->io_watcher.fd, &h, 0);
+#else
       size = sendmsg(handle->io_watcher.fd, &h, 0);
+#endif
     } while (size == -1 && errno == EINTR);
 
     if (size == -1) {
@@ -527,7 +545,11 @@
                      const struct sockaddr* addr,
                      unsigned int addrlen) {
   int err;
+#if defined(__sgii)
+  struct xpg5_msghdr h;
+#else
   struct msghdr h;
+#endif
   ssize_t size;
 
   assert(nbufs > 0);
@@ -551,7 +573,11 @@
   h.msg_iovlen = nbufs;
 
   do {
+#if defined(__sgii)
+    size = _xpg5_sendmsg(handle->io_watcher.fd, &h, 0);
+#else
     size = sendmsg(handle->io_watcher.fd, &h, 0);
+#endif
   } while (size == -1 && errno == EINTR);
 
   if (size == -1) {
diff -u -r -N cmake-3.17.2-orig/bootstrap cmake-3.17.2/bootstrap
--- cmake-3.17.2-orig/bootstrap	2020-04-28 15:23:06.000000000 +0000
+++ cmake-3.17.2/bootstrap	2020-05-12 18:15:21.096848840 +0000
@@ -568,6 +568,7 @@
     src/unix/cmake-bootstrap.c \
     src/unix/core.c \
     src/unix/fs.c \
+    src/unix/irix.c \
     src/unix/loop.c \
     src/unix/loop-watcher.c \
     src/unix/no-fsevents.c \
