diff -ru exirel-epub-d6db4535273d/test/test_ncx.py exirel-epub-new/test/test_ncx.py
--- exirel-epub-d6db4535273d/test/test_ncx.py	2014-04-01 19:22:00.000000000 +0200
+++ exirel-epub-new/test/test_ncx.py	2019-09-06 12:48:34.235368837 +0200
@@ -3,6 +3,7 @@
 
 
 import os
+import sys
 import unittest
 
 
@@ -374,6 +375,7 @@
 
 class TestNavPoint(unittest.TestCase):
     
+    @unittest.skipIf(sys.version_info >= (3, 8), reason="toxml keeps elements order")
     def test_as_xml_element(self):
         xml_string = """<navPoint class="some_class" id="point5" playOrder="5">""" + \
             """<navLabel xml:lang="fr" dir="ltr"><text>Label fr</text></navLabel>""" + \
@@ -419,6 +421,7 @@
 
 class TestPageTarget(unittest.TestCase):
 
+    @unittest.skipIf(sys.version_info >= (3, 8), reason="toxml keeps elements order")
     def test_as_xml_element(self):
         xml_string = """<pageTarget class="some_class" id="testid" playOrder="5" type="page_type" value="Some Value">""" + \
             """<navLabel xml:lang="fr" dir="ltr"><text>Label fr</text></navLabel>""" + \
@@ -435,6 +438,7 @@
 
 class TestPageList(unittest.TestCase):
 
+    @unittest.skipIf(sys.version_info >= (3, 8), reason="toxml keeps elements order")
     def test_as_xml_element(self):
         xml_string = """<pageList id="pagelist-1" class="page_class">""" + \
             """<navLabel xml:lang="fr" dir="ltr"><text>Label fr</text></navLabel>""" + \
@@ -457,6 +461,7 @@
 
 class TestNavTarget(unittest.TestCase):
 
+    @unittest.skipIf(sys.version_info >= (3, 8), reason="toxml keeps elements order")
     def test_as_xml_element(self):
         xml_string = """<navTarget class="some_class" id="testid" playOrder="5" value="5">""" + \
             """<navLabel xml:lang="fr" dir="ltr"><text>Label fr</text></navLabel>""" + \
@@ -473,6 +478,7 @@
 
 class TestNavList(unittest.TestCase):
 
+    @unittest.skipIf(sys.version_info >= (3, 8), reason="toxml keeps elements order")
     def test_as_xml_element(self):
         xml_string = """<navList class="some_class" id="testid">""" + \
             """<navLabel xml:lang="fr" dir="ltr"><text>Label fr</text></navLabel>""" + \
@@ -495,6 +501,7 @@
 
 class TestNcx(unittest.TestCase):
     
+    @unittest.skipIf(sys.version_info >= (3, 8), reason="toprettyxml keeps elements order")
     def test_as_xml_document(self):
         """Check if ncx.as_xml_document reproduce a good xml.
         
diff -ru exirel-epub-d6db4535273d/test/test_opf.py exirel-epub-new/test/test_opf.py
--- exirel-epub-d6db4535273d/test/test_opf.py	2014-04-01 19:22:00.000000000 +0200
+++ exirel-epub-new/test/test_opf.py	2019-09-06 12:46:52.891465026 +0200
@@ -2,6 +2,7 @@
 from __future__ import unicode_literals
 
 
+import sys
 import unittest
 
 
@@ -521,6 +522,7 @@
         self.assertEqual(len(manifest), 1, 'Il manque un objet !')
         self.assertIsInstance(manifest[identifier], epub.opf.ManifestItem)
 
+    @unittest.skipIf(sys.version_info >= (3, 8), reason="toxml keeps elements order")
     def test_as_xml_element(self):
         xml_string = """<manifest>
     <item id="css1" href="happy.css" media-type="text/css" />
@@ -567,28 +569,28 @@
     def test_init(self):
         sp = epub.opf.Spine()
         self.assertIsNone(sp.toc)
-        self.assertEquals(sp.itemrefs, [])
+        self.assertEqual(sp.itemrefs, [])
 
         sp = epub.opf.Spine('ncx_file_id')
-        self.assertEquals(sp.toc, 'ncx_file_id')
-        self.assertEquals(sp.itemrefs, [])
+        self.assertEqual(sp.toc, 'ncx_file_id')
+        self.assertEqual(sp.itemrefs, [])
 
         itemrefs = [('text0001', True), ('text0002', False)]
         sp = epub.opf.Spine('ncx_file_id', itemrefs)
-        self.assertEquals(sp.toc, 'ncx_file_id')
-        self.assertEquals(sp.itemrefs, itemrefs)
+        self.assertEqual(sp.toc, 'ncx_file_id')
+        self.assertEqual(sp.itemrefs, itemrefs)
 
     def test_add_itemref(self):
         sp = epub.opf.Spine()
         sp.add_itemref('text0001')
-        self.assertEquals(sp.itemrefs, [('text0001', True)])
+        self.assertEqual(sp.itemrefs, [('text0001', True)])
 
         sp.add_itemref('text0002', True)
-        self.assertEquals(sp.itemrefs,
+        self.assertEqual(sp.itemrefs,
                           [('text0001', True), ('text0002', True)])
 
         sp.add_itemref('text0003', False)
-        self.assertEquals(sp.itemrefs,
+        self.assertEqual(sp.itemrefs,
                           [('text0001', True),
                            ('text0002', True),
                            ('text0003', False)])
@@ -596,10 +598,10 @@
     def test_append(self):
         sp = epub.opf.Spine()
         sp.append(('text0001', True))
-        self.assertEquals(sp.itemrefs, [('text0001', True)])
+        self.assertEqual(sp.itemrefs, [('text0001', True)])
 
         sp.append(('text0002', False))
-        self.assertEquals(sp.itemrefs,
+        self.assertEqual(sp.itemrefs,
                           [('text0001', True), ('text0002', False)])
 
     def test_as_xml_element(self):
@@ -634,6 +636,7 @@
         self.assertIsInstance(opf.spine, epub.opf.Spine)
         self.assertIsInstance(opf.guide, epub.opf.Guide)
 
+    @unittest.skipIf(sys.version_info >= (3, 8), reason="toxml keeps elements order")
     def test_as_xml_document(self):
         xml_string = """<?xml version="1.0" ?>
 <package unique-identifier="BookId" version="2.0" xmlns="http://www.idpf.org/2007/opf">
diff -ru exirel-epub-d6db4535273d/test/test.py exirel-epub-new/test/test.py
--- exirel-epub-d6db4535273d/test/test.py	2014-04-01 19:22:00.000000000 +0200
+++ exirel-epub-new/test/test.py	2019-09-06 11:54:08.749822176 +0200
@@ -267,7 +267,7 @@
 
     def test_chapters(self):
         book = epub.Book(self.epub_file)
-        self.assertEquals(len(book.chapters), 6)
+        self.assertEqual(len(book.chapters), 6)
 
         for chapter in book.chapters:
             self.assertIsNotNone(chapter)
@@ -275,7 +275,7 @@
 
     def test_extra_chapters(self):
         book = epub.Book(self.epub_file)
-        self.assertEquals(len(list(book.extra_chapters)), 0)
+        self.assertEqual(len(list(book.extra_chapters)), 0)
 
     def test_metadata_creators(self):
         name = 'Johnson Cave'
@@ -288,19 +288,19 @@
     def test_metadata_description(self):
         description = self.epub_file.opf.metadata.description
         book = epub.Book(self.epub_file)
-        self.assertEquals(book.description, description)
+        self.assertEqual(book.description, description)
 
     def test_metadata_isbn(self):
         isbn = '7814-54654-4354-43545'
         self.epub_file.opf.metadata.add_identifier(isbn, 'ID_ISBN', 'isbn')
         book = epub.Book(self.epub_file)
-        self.assertEquals(book.isbn, isbn)
+        self.assertEqual(book.isbn, isbn)
 
     def test_metadata_publisher(self):
         publisher = 'TEST_PUBLISHER'
         self.epub_file.opf.metadata.publisher = publisher
         book = epub.Book(self.epub_file)
-        self.assertEquals(book.publisher, publisher)
+        self.assertEqual(book.publisher, publisher)
 
     def test_metadata_contributors(self):
         name = 'Johnson Cave'
@@ -320,16 +320,16 @@
     def test_dc_type(self):
         self.epub_file.opf.metadata.dc_type = 'test_type'
         book = epub.Book(self.epub_file)
-        self.assertEquals(book.dc_type, 'test_type')
+        self.assertEqual(book.dc_type, 'test_type')
 
     def test_dc_format(self):
         self.epub_file.opf.metadata.format = 'test_format'
         book = epub.Book(self.epub_file)
-        self.assertEquals(book.dc_format, 'test_format')
+        self.assertEqual(book.dc_format, 'test_format')
 
     def test_identifiers(self):
         book = epub.Book(self.epub_file)
-        self.assertEquals(book.identifiers,
+        self.assertEqual(book.identifiers,
                           [('urn:uuid:477d1a82-a70d-4ee5-a0ff-0dddc60fd2bb',
                             'BookId',
                             'UUID')])
@@ -337,7 +337,7 @@
     def test_source(self):
         self.epub_file.opf.metadata.source = 'test_source'
         book = epub.Book(self.epub_file)
-        self.assertEquals(book.source, 'test_source')
+        self.assertEqual(book.source, 'test_source')
 
     def test_languages(self):
         lang = 'test_lang'
@@ -348,17 +348,17 @@
     def test_relation(self):
         self.epub_file.opf.metadata.relation = 'test_relation'
         book = epub.Book(self.epub_file)
-        self.assertEquals(book.relation, 'test_relation')
+        self.assertEqual(book.relation, 'test_relation')
 
     def test_coverage(self):
         self.epub_file.opf.metadata.coverage = 'test_coverage'
         book = epub.Book(self.epub_file)
-        self.assertEquals(book.coverage, 'test_coverage')
+        self.assertEqual(book.coverage, 'test_coverage')
 
     def test_right(self):
         self.epub_file.opf.metadata.right = 'test_right'
         book = epub.Book(self.epub_file)
-        self.assertEquals(book.right, 'test_right')
+        self.assertEqual(book.right, 'test_right')
 
     def test_metas(self):
         name = 'meta_name'
@@ -392,5 +392,5 @@
     def test_read(self):
         chapter = self.book.chapters[0]
         origin = self.epub_file.get_item(chapter.identifier)
-        self.assertEquals(chapter.read(),
+        self.assertEqual(chapter.read(),
                           self.epub_file.read_item(origin))
diff -ru exirel-epub-d6db4535273d/test/test_utils.py exirel-epub-new/test/test_utils.py
--- exirel-epub-d6db4535273d/test/test_utils.py	2014-04-01 19:22:00.000000000 +0200
+++ exirel-epub-new/test/test_utils.py	2019-09-06 11:54:08.749822176 +0200
@@ -17,12 +17,12 @@
         xml_text = """<someNode>%s</someNode>""" % expected_result
         xml_node = minidom.parseString(xml_text).documentElement
 
-        self.assertEquals(epub.utils.get_node_text(xml_node), expected_result)
+        self.assertEqual(epub.utils.get_node_text(xml_node), expected_result)
 
         xml_text = """<someEmptyNode></someEmptyNode>"""
         xml_node = minidom.parseString(xml_text).documentElement
 
-        self.assertEquals(epub.utils.get_node_text(xml_node), '')
+        self.assertEqual(epub.utils.get_node_text(xml_node), '')
 
     def test_get_urlpath_part(self):
         expected_href = 'path/to/file.html'
@@ -30,5 +30,5 @@
         url = '%s#%s' % (expected_href, expected_fragment)
 
         href, fragment = epub.utils.get_urlpath_part(url)
-        self.assertEquals(href, expected_href)
-        self.assertEquals(fragment, expected_fragment)
+        self.assertEqual(href, expected_href)
+        self.assertEqual(fragment, expected_fragment)
